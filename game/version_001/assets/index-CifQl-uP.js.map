{"version":3,"file":"index-CifQl-uP.js","sources":["../../client/game/type/PLAYER.ts","../../libs/battleship/grid/type/DIRECTION.ts","../../libs/battleship/ai/type/Orientation.ts","../../libs/battleship/grid/grid_util.ts","../../libs/battleship/grid/BattleshipGrid.ts","../../libs/battleship/grid/BattleshipGridRenderer.ts","../../libs/battleship/grid/ShipPlacer.ts","../../libs/battleship/grid/FleetPlacer.ts","../../libs/battleship/ai/ShipTracker.ts","../../libs/battleship/ai/type/State.ts","../../libs/battleship/ai/strategy/RandomStrategy.ts","../../libs/battleship/util/random.ts","../../libs/battleship/ai/strategy/ShipOrientationStrategy.ts","../../libs/battleship/ai/strategy/SinkStrategy.ts","../../libs/battleship/events/events.ts","../../libs/battleship/ai/StateMachine.ts","../../libs/battleship/ai/BattleshipAI.ts","../../client/game/type/FLEET_TYPE.ts","../../client/game/type/GAME_MODE.ts","../../client/game/type/PLAYER_TYPE.ts","../../client/game/tests.ts","../../node_modules/@atari-monk/event-emitter/dist/EventEmitter.js","../../client/game/config.ts","../../client/game/render.ts","../../client/game/input.ts","../../client/game/logic.ts","../../client/game/loop.ts","../../client/index.ts"],"sourcesContent":["export enum PLAYER {\r\n  PLAYER1,\r\n  PLAYER2,\r\n}\r\n","export enum DIRECTION {\r\n  LEFT,\r\n  RIGHT,\r\n  UP,\r\n  DOWN,\r\n}\r\n","export enum Orientation {\r\n  Horizontal,\r\n  Vertical,\r\n}\r\n\r\nexport function getRandomOrientation(): Orientation {\r\n  const orientations: Orientation[] = [\r\n    Orientation.Horizontal,\r\n    Orientation.Vertical,\r\n  ]\r\n  return orientations[Math.floor(Math.random() * orientations.length)]\r\n}\r\n\r\nexport enum ShipOrientation {\r\n  Unknown,\r\n  Horizontal,\r\n  Vertical,\r\n}\r\n","import {ShipOrientation} from '../ai/type/Orientation'\r\nimport {Range} from './type/Range'\r\n\r\nexport function getRandomCell(range: Range): string {\r\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n  const minLetterIndex = letters.indexOf(range.minLetter.toUpperCase())\r\n  const maxLetterIndex = letters.indexOf(range.maxLetter.toUpperCase())\r\n\r\n  const letter =\r\n    letters[\r\n      Math.floor(Math.random() * (maxLetterIndex - minLetterIndex + 1)) +\r\n        minLetterIndex\r\n    ]\r\n  const number =\r\n    Math.floor(Math.random() * (range.maxNumber - range.minNumber + 1)) +\r\n    range.minNumber\r\n\r\n  return letter + number\r\n}\r\n\r\nexport function labelToIndex(\r\n  label: string,\r\n  rows: number = 10,\r\n  cols: number = 10\r\n): {row: number; col: number} | null {\r\n  const match = label.match(/^([A-J])(\\d{1,2})$/i)\r\n  if (!match) return null\r\n\r\n  const col = match[1].toUpperCase().charCodeAt(0) - 65\r\n  const row = parseInt(match[2], 10) - 1\r\n\r\n  return row >= 0 && row < rows && col >= 0 && col < cols ? {row, col} : null\r\n}\r\n\r\nexport function indexToLabel(\r\n  row: number,\r\n  col: number,\r\n  rows: number = 10,\r\n  cols: number = 10\r\n): string | null {\r\n  if (row < 0 || row >= rows || col < 0 || col >= cols) return null\r\n\r\n  const letter = String.fromCharCode(col + 65)\r\n  const number = row + 1\r\n\r\n  return `${letter}${number}`\r\n}\r\n\r\nexport function sortLabels(\r\n  labels: Set<string>,\r\n  orientation: ShipOrientation\r\n): string[] {\r\n  const labelArray = Array.from(labels)\r\n  labelArray.sort((a, b) => {\r\n    const {row: rowA, col: colA} = labelToIndex(a)!\r\n    const {row: rowB, col: colB} = labelToIndex(b)!\r\n    return orientation === ShipOrientation.Horizontal\r\n      ? colA - colB\r\n      : rowA - rowB\r\n  })\r\n  return labelArray\r\n}\r\n","import {GridCell} from './type/GridCell'\r\nimport {Ship} from './type/Ship'\r\nimport {HitResult} from './type/HitResult'\r\nimport {DIRECTION} from './type/DIRECTION'\r\nimport {labelToIndex} from './grid_util'\r\n\r\nexport class BattleshipGrid {\r\n  private _grid: GridCell[][]\r\n  private _ships: Ship[]\r\n\r\n  get grid(): GridCell[][] {\r\n    return this._grid\r\n  }\r\n\r\n  get ships(): Ship[] {\r\n    return this._ships\r\n  }\r\n\r\n  constructor(\r\n    public rows: number = 10,\r\n    public cols: number = 10,\r\n    initialGrid?: GridCell[][],\r\n    ships: Ship[] = [\r\n      {id: 1, size: 5, type: 'C'},\r\n      {id: 2, size: 4, type: 'B'},\r\n      {id: 3, size: 3, type: 'D'},\r\n      {id: 4, size: 3, type: 'S'},\r\n      {id: 5, size: 2, type: 'P'},\r\n    ]\r\n  ) {\r\n    this._grid = initialGrid ?? this.generateGrid()\r\n    this._ships = ships\r\n  }\r\n\r\n  private generateGrid(): GridCell[][] {\r\n    const grid: GridCell[][] = []\r\n    for (let i = 0; i < this.rows; i++) {\r\n      const row: GridCell[] = []\r\n      for (let j = 0; j < this.cols; j++) {\r\n        row.push({isHit: false})\r\n      }\r\n      grid.push(row)\r\n    }\r\n    return grid\r\n  }\r\n\r\n  private isValidPosition(row: number, col: number): boolean {\r\n    return row >= 0 && row < this.rows && col >= 0 && col < this.cols\r\n  }\r\n\r\n  public getShipType(shipId: number): string {\r\n    const ship = this._ships.find(s => s.id === shipId)\r\n    return ship ? ship.type : '?'\r\n  }\r\n\r\n  public isGameOver(): boolean {\r\n    for (let row of this._grid) {\r\n      for (let cell of row) {\r\n        if (cell.shipId !== undefined && !cell.isHit) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  public hitCell(label: string): HitResult {\r\n    const position = labelToIndex(label, this.rows, this.cols)\r\n    if (!position || !this.isValidPosition(position.row, position.col)) {\r\n      throw new Error('Invalid label provided')\r\n    }\r\n\r\n    const {row, col} = position\r\n    const cell = this._grid[row][col]\r\n\r\n    if (cell.isHit) {\r\n      return {\r\n        label,\r\n        alreadyHit: true,\r\n        shipHit: false,\r\n      }\r\n    }\r\n\r\n    cell.isHit = true\r\n\r\n    return {\r\n      label,\r\n      alreadyHit: false,\r\n      shipHit: !!cell.shipId,\r\n    }\r\n  }\r\n\r\n  public isMissNextTo(label: string, direction: DIRECTION): boolean {\r\n    const position = labelToIndex(label, this.rows, this.cols)\r\n    if (!position || !this.isValidPosition(position.row, position.col))\r\n      return false\r\n\r\n    let {row, col} = position\r\n\r\n    switch (direction) {\r\n      case DIRECTION.LEFT:\r\n        col--\r\n        break\r\n      case DIRECTION.RIGHT:\r\n        col++\r\n        break\r\n      case DIRECTION.UP:\r\n        row--\r\n        break\r\n      case DIRECTION.DOWN:\r\n        row++\r\n        break\r\n    }\r\n\r\n    if (!this.isValidPosition(row, col)) return false\r\n\r\n    const cell = this._grid[row][col]\r\n    return cell.isHit && !cell.shipId\r\n  }\r\n}\r\n","import {BattleshipGrid} from './BattleshipGrid'\r\n\r\nexport class BattleshipGridRenderer {\r\n  constructor(private grid: BattleshipGrid) {}\r\n\r\n  public render(hideShips: boolean = false): string {\r\n    const rows = this.grid.grid\r\n    const cols = rows[0].length\r\n\r\n    const columnLabels =\r\n      '   ' +\r\n      Array.from({length: cols}, (_, i) => String.fromCharCode(65 + i)).join(\r\n        ' '\r\n      )\r\n\r\n    const gridRows = rows\r\n      .map((row, rowIndex) => {\r\n        const rowLabel = (rowIndex + 1).toString().padStart(2, ' ')\r\n        const cells = row\r\n          .map(cell => {\r\n            if (cell.isHit) {\r\n              return cell.shipId ? 'X' : 'O'\r\n            }\r\n            return cell.shipId\r\n              ? hideShips\r\n                ? '-'\r\n                : this.getShipType(cell.shipId)\r\n              : '-'\r\n          })\r\n          .join(' ')\r\n        return `${rowLabel} ${cells}`\r\n      })\r\n      .join('\\n')\r\n\r\n    return `${columnLabels}\\n${gridRows}`\r\n  }\r\n\r\n  private getShipType(shipId: number): string {\r\n    return this.grid.getShipType(shipId)\r\n  }\r\n}\r\n","import {GridCell} from './type/GridCell'\r\n\r\nexport class ShipPlacer {\r\n  static placeShipsFromArray(\r\n    shipGrid: number[][],\r\n    grid: GridCell[][],\r\n    rows: number,\r\n    cols: number\r\n  ): boolean {\r\n    if (shipGrid.length !== rows || shipGrid[0].length !== cols) {\r\n      console.error('The grid must be 10x10.')\r\n      return false\r\n    }\r\n\r\n    let shipId = 1\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        if (shipGrid[row][col] === 1 && grid[row][col].shipId === undefined) {\r\n          grid[row][col].shipId = shipId\r\n        }\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n","import {GridCell} from './type/GridCell'\r\nimport {Ship} from './type/Ship'\r\nimport {IFleetPlacer} from './type/IFleetPlacer'\r\n\r\nexport class FleetPlacer implements IFleetPlacer {\r\n  public placeFleet(\r\n    ships: Ship[],\r\n    grid: GridCell[][],\r\n    rows: number,\r\n    cols: number,\r\n    enforceSpacing: boolean = true\r\n  ): boolean {\r\n    for (const ship of ships) {\r\n      let placed = false\r\n      let attempts = 0\r\n\r\n      while (!placed && attempts < 100) {\r\n        const orientation = Math.random() < 0.5 ? 'H' : 'V'\r\n        const maxRow = orientation === 'V' ? rows - ship.size : rows\r\n        const maxCol = orientation === 'H' ? cols - ship.size : cols\r\n        const row = Math.floor(Math.random() * maxRow)\r\n        const col = Math.floor(Math.random() * maxCol)\r\n\r\n        if (\r\n          this.canPlaceShip(\r\n            row,\r\n            col,\r\n            orientation,\r\n            ship.size,\r\n            grid,\r\n            rows,\r\n            cols,\r\n            enforceSpacing\r\n          )\r\n        ) {\r\n          this.placeShip(row, col, orientation, ship, grid)\r\n          placed = true\r\n        }\r\n        attempts++\r\n      }\r\n\r\n      if (!placed) {\r\n        console.error(\r\n          `Failed to place ship of size ${ship.size} after 100 attempts.`\r\n        )\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  private canPlaceShip(\r\n    row: number,\r\n    col: number,\r\n    orientation: 'H' | 'V',\r\n    size: number,\r\n    grid: GridCell[][],\r\n    rows: number,\r\n    cols: number,\r\n    enforceSpacing: boolean\r\n  ): boolean {\r\n    const coords: {row: number; col: number}[] = []\r\n\r\n    if (orientation === 'H') {\r\n      if (col + size > cols) return false\r\n      for (let i = 0; i < size; i++) {\r\n        coords.push({row, col: col + i})\r\n      }\r\n    } else {\r\n      if (row + size > rows) return false\r\n      for (let i = 0; i < size; i++) {\r\n        coords.push({row: row + i, col})\r\n      }\r\n    }\r\n\r\n    return this.isValidPlacement(coords, grid, rows, cols, enforceSpacing)\r\n  }\r\n\r\n  private isValidPlacement(\r\n    coords: {row: number; col: number}[],\r\n    grid: GridCell[][],\r\n    rows: number,\r\n    cols: number,\r\n    enforceSpacing: boolean\r\n  ): boolean {\r\n    for (const {row, col} of coords) {\r\n      if (grid[row][col].shipId !== undefined) return false\r\n    }\r\n\r\n    if (enforceSpacing) {\r\n      for (const {row, col} of coords) {\r\n        for (let i = row - 1; i <= row + 1; i++) {\r\n          for (let j = col - 1; j <= col + 1; j++) {\r\n            if (i >= 0 && i < rows && j >= 0 && j < cols) {\r\n              if (grid[i][j].shipId !== undefined) return false\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  private placeShip(\r\n    row: number,\r\n    col: number,\r\n    orientation: 'H' | 'V',\r\n    ship: Ship,\r\n    grid: GridCell[][]\r\n  ): void {\r\n    if (orientation === 'H') {\r\n      for (let i = 0; i < ship.size; i++) {\r\n        grid[row][col + i].shipId = ship.id\r\n      }\r\n    } else {\r\n      for (let i = 0; i < ship.size; i++) {\r\n        grid[row + i][col].shipId = ship.id\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {labelToIndex} from '../grid/grid_util'\r\nimport {ShipOrientation} from './type/Orientation'\r\nimport {ShipTarget} from './type/ShipTarget'\r\n\r\nexport class ShipTracker {\r\n  private ships: Set<ShipTarget> = new Set()\r\n\r\n  handleShot(shot: string): void {\r\n    const existingShip = this.findAdjacentShip(shot)\r\n\r\n    if (existingShip) {\r\n      existingShip.hits.add(shot)\r\n    } else {\r\n      this.ships.add({\r\n        hits: new Set<string>([shot]),\r\n        orientation: ShipOrientation.Unknown,\r\n        isSunk: false,\r\n      })\r\n    }\r\n  }\r\n\r\n  getFirstActiveHit(): ShipTarget | undefined {\r\n    for (const ship of this.ships) {\r\n      if (ship.orientation === ShipOrientation.Unknown && !ship.isSunk)\r\n        return ship\r\n    }\r\n  }\r\n\r\n  getShipToSink(): ShipTarget | undefined {\r\n    for (const ship of this.ships) {\r\n      if (\r\n        ship.orientation !== ShipOrientation.Unknown &&\r\n        !ship.isSunk &&\r\n        ship.hits.size >= 2\r\n      )\r\n        return ship\r\n    }\r\n  }\r\n\r\n  private findAdjacentShip(shot: string): ShipTarget | undefined {\r\n    for (const ship of this.ships) {\r\n      for (const existingHit of ship.hits) {\r\n        if (this.isAdjacent(existingHit, shot, ship.orientation)) {\r\n          return ship\r\n        }\r\n      }\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  private isAdjacent(\r\n    existingHit: string,\r\n    shot: string,\r\n    orientation: ShipOrientation\r\n  ): boolean {\r\n    const {row: existingX, col: existingY} = labelToIndex(existingHit)!\r\n    const {row: shotX, col: shotY} = labelToIndex(shot)!\r\n\r\n    if (orientation === ShipOrientation.Unknown) {\r\n      return (\r\n        (Math.abs(existingX - shotX) === 1 && existingY === shotY) ||\r\n        (Math.abs(existingY - shotY) === 1 && existingX === shotX)\r\n      )\r\n    }\r\n\r\n    if (orientation === ShipOrientation.Horizontal) {\r\n      return existingX === shotX && Math.abs(existingY - shotY) === 1\r\n    }\r\n\r\n    if (orientation === ShipOrientation.Vertical) {\r\n      return existingY === shotY && Math.abs(existingX - shotX) === 1\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n","export enum State {\r\n  Idle,\r\n  Random,\r\n  ShipOrientation,\r\n  Sink,\r\n}\r\n","import {BattleshipAI} from '../BattleshipAI'\r\nimport {IStrategy} from '../type/IStrategy'\r\nimport {Range} from '../../grid/type/Range'\r\nimport {AttackResult} from '../type/AttackResult'\r\nimport {getRandomCell} from '../../grid/grid_util'\r\n\r\nexport class RandomStrategy implements IStrategy {\r\n  private _ai\r\n\r\n  constructor(ai: BattleshipAI) {\r\n    this._ai = ai\r\n  }\r\n\r\n  attack(range: Range): AttackResult {\r\n    let shot: string = getRandomCell(range)\r\n\r\n    while (this._ai.shotsTaken.has(shot)) {\r\n      shot = getRandomCell(range)\r\n    }\r\n\r\n    this._ai.shotsTaken.add(shot)\r\n\r\n    return {\r\n      shot,\r\n      log: (isShipHit: boolean) =>\r\n        `Player 2: ${shot} ${isShipHit ? 'hit' : 'miss'} AI: Random`,\r\n    }\r\n  }\r\n\r\n  updateState(): void {}\r\n}\r\n","export function coinToss(): boolean {\r\n  return Math.random() < 0.5\r\n}\r\n\r\nexport function randomSign(): -1 | 1 {\r\n  return Math.random() < 0.5 ? -1 : 1\r\n}\r\n","import {BattleshipAI} from '../BattleshipAI'\r\nimport {IStrategy} from '../type/IStrategy'\r\nimport {Range} from '../../grid/type/Range'\r\nimport {\r\n  getRandomOrientation,\r\n  Orientation,\r\n  ShipOrientation,\r\n} from '../type/Orientation'\r\nimport {coinToss} from '../../util/random'\r\nimport {AttackResult} from '../type/AttackResult'\r\nimport {DIRECTION} from '../../grid/type/DIRECTION'\r\nimport {indexToLabel, labelToIndex} from '../../grid/grid_util'\r\n\r\nexport class ShipOrientationStrategy implements IStrategy {\r\n  private _ai\r\n  private orientation: Orientation = Orientation.Horizontal\r\n  private counter: Set<DIRECTION> = new Set()\r\n\r\n  constructor(ai: BattleshipAI) {\r\n    this._ai = ai\r\n  }\r\n\r\n  attack(range: Range): AttackResult {\r\n    const target = this._ai.getHitShip()!\r\n    const hit = labelToIndex([...target.hits][0])!\r\n    const next = this.getNextMove(hit)\r\n    const shot = indexToLabel(next.row, next.col)!\r\n\r\n    this._ai.shotsTaken.add(shot)\r\n\r\n    return {\r\n      shot,\r\n      log: (isShipHit: boolean) =>\r\n        `Player 2: ${shot} ${\r\n          isShipHit ? 'hit' : 'miss'\r\n        } AI: Ship Orientation orientation: ${\r\n          ShipOrientation[target.orientation]\r\n        }`,\r\n    }\r\n  }\r\n\r\n  updateState(): void {\r\n    const target = this._ai.getHitShip()!\r\n    if (target.hits.size !== 2) return\r\n    const [firstHit, secondHit] = [...target.hits]\r\n    const hitPos1 = labelToIndex(firstHit)!\r\n    const hitPos2 = labelToIndex(secondHit)!\r\n\r\n    if (hitPos1.row === hitPos2.row) {\r\n      target.orientation = ShipOrientation.Horizontal\r\n    } else if (hitPos1.col === hitPos2.col) {\r\n      target.orientation = ShipOrientation.Vertical\r\n    }\r\n\r\n    this.reset()\r\n  }\r\n\r\n  private getNextMove(hit: {row: number; col: number}) {\r\n    this.orientation = getRandomOrientation()\r\n\r\n    if (this.counter.has(DIRECTION.LEFT) && this.counter.has(DIRECTION.RIGHT)) {\r\n      this.orientation = Orientation.Vertical\r\n    }\r\n    if (this.counter.has(DIRECTION.UP) && this.counter.has(DIRECTION.DOWN)) {\r\n      this.orientation = Orientation.Horizontal\r\n    }\r\n\r\n    let next = {row: hit.row, col: hit.col}\r\n\r\n    if (this.orientation === Orientation.Horizontal) {\r\n      if (!this.counter.has(DIRECTION.LEFT) && coinToss()) {\r\n        this.counter.add(DIRECTION.LEFT)\r\n        next.row--\r\n      } else if (!this.counter.has(DIRECTION.RIGHT)) {\r\n        this.counter.add(DIRECTION.RIGHT)\r\n        next.row++\r\n      }\r\n    } else {\r\n      if (!this.counter.has(DIRECTION.DOWN) && coinToss()) {\r\n        this.counter.add(DIRECTION.DOWN)\r\n        next.col--\r\n      } else if (!this.counter.has(DIRECTION.UP)) {\r\n        this.counter.add(DIRECTION.UP)\r\n        next.col++\r\n      }\r\n    }\r\n    return next\r\n  }\r\n\r\n  private reset() {\r\n    this.counter.clear()\r\n  }\r\n}\r\n","import {BattleshipAI} from '../BattleshipAI'\r\nimport {IStrategy} from '../type/IStrategy'\r\nimport {Range} from '../../grid/type/Range'\r\nimport {AttackResult} from '../type/AttackResult'\r\nimport {DIRECTION} from '../../grid/type/DIRECTION'\r\nimport {ShipOrientation} from '../type/Orientation'\r\nimport {coinToss} from '../../util/random'\r\nimport {indexToLabel, labelToIndex, sortLabels} from '../../grid/grid_util'\r\nimport {ShipTarget} from '../type/ShipTarget'\r\n\r\nexport class SinkStrategy implements IStrategy {\r\n  private _ai\r\n\r\n  constructor(ai: BattleshipAI) {\r\n    this._ai = ai\r\n  }\r\n\r\n  attack(range: Range): AttackResult {\r\n    const target = this._ai.getShipToSink()!\r\n\r\n    let shot = ''\r\n    let direction = this.getRandomDirection(target.orientation)\r\n    let cell = this.getLabelsFromSet(\r\n      target.hits,\r\n      direction,\r\n      target.orientation\r\n    )!\r\n\r\n    const isEnd = this._ai.enemyGrid.isMissNextTo(cell, direction)\r\n\r\n    if (isEnd) {\r\n      direction = this.getOppositeDirection(direction)\r\n      cell = this.getLabelsFromSet(target.hits, direction, target.orientation)!\r\n    }\r\n\r\n    const cellIndex = labelToIndex(cell)!\r\n    let shotIndex = {row: cellIndex.row, col: cellIndex.col}\r\n\r\n    if (target.orientation === ShipOrientation.Horizontal) {\r\n      if (direction === DIRECTION.LEFT) shotIndex.col--\r\n      if (direction === DIRECTION.RIGHT) shotIndex.col++\r\n    } else {\r\n      if (direction === DIRECTION.UP) shotIndex.row--\r\n      if (direction === DIRECTION.DOWN) shotIndex.row++\r\n    }\r\n\r\n    shot = indexToLabel(shotIndex.row, shotIndex.col)!\r\n\r\n    if (this.isShipSunk(target)) {\r\n      target.isSunk = true\r\n    }\r\n\r\n    this._ai.shotsTaken.add(shot)\r\n    return {\r\n      shot,\r\n      log: (isShipHit: boolean) =>\r\n        `Player 2: ${shot} ${isShipHit ? 'hit' : 'miss'} AI: Sink`,\r\n    }\r\n  }\r\n\r\n  updateState(): void {}\r\n\r\n  public test_getLabelsFromSet(\r\n    labels: Set<string>,\r\n    direction: DIRECTION,\r\n    orientation: ShipOrientation\r\n  ): string | null {\r\n    return this.getLabelsFromSet(labels, direction, orientation)\r\n  }\r\n\r\n  private getLabelsFromSet(\r\n    labels: Set<string>,\r\n    direction: DIRECTION,\r\n    orientation: ShipOrientation\r\n  ): string | null {\r\n    if (labels.size === 0) return null\r\n\r\n    const sortedLabels = sortLabels(labels, orientation)\r\n    return direction === DIRECTION.LEFT || direction === DIRECTION.UP\r\n      ? sortedLabels[0]\r\n      : sortedLabels[sortedLabels.length - 1]\r\n  }\r\n\r\n  private getRandomDirection(orientation: ShipOrientation): DIRECTION {\r\n    if (orientation === ShipOrientation.Horizontal) {\r\n      return coinToss() ? DIRECTION.LEFT : DIRECTION.RIGHT\r\n    } else {\r\n      return coinToss() ? DIRECTION.UP : DIRECTION.DOWN\r\n    }\r\n  }\r\n\r\n  private getOppositeDirection(direction: DIRECTION): DIRECTION {\r\n    switch (direction) {\r\n      case DIRECTION.LEFT:\r\n        return DIRECTION.RIGHT\r\n      case DIRECTION.RIGHT:\r\n        return DIRECTION.LEFT\r\n      case DIRECTION.UP:\r\n        return DIRECTION.DOWN\r\n      case DIRECTION.DOWN:\r\n        return DIRECTION.UP\r\n    }\r\n  }\r\n\r\n  private isShipSunk(ship: ShipTarget): boolean {\r\n    const sortedHits = sortLabels(ship.hits, ship.orientation)\r\n\r\n    if (ship.orientation === ShipOrientation.Horizontal) {\r\n      const leftCell = sortedHits[0]\r\n      const rightCell = sortedHits[sortedHits.length - 1]\r\n      const leftMiss = this._ai.enemyGrid.isMissNextTo(leftCell, DIRECTION.LEFT)\r\n      const rightMiss = this._ai.enemyGrid.isMissNextTo(\r\n        rightCell,\r\n        DIRECTION.RIGHT\r\n      )\r\n\r\n      if (leftMiss && rightMiss) {\r\n        return true\r\n      }\r\n    } else if (ship.orientation === ShipOrientation.Vertical) {\r\n      const topCell = sortedHits[0]\r\n      const bottomCell = sortedHits[sortedHits.length - 1]\r\n      const topMiss = this._ai.enemyGrid.isMissNextTo(topCell, DIRECTION.UP)\r\n      const bottomMiss = this._ai.enemyGrid.isMissNextTo(\r\n        bottomCell,\r\n        DIRECTION.DOWN\r\n      )\r\n\r\n      if (topMiss && bottomMiss) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n","import {State} from '../ai/type/State'\r\n\r\nexport const EVENT_STATE_CHANGED: unique symbol = Symbol('EVENT_STATE_CHANGED')\r\n\r\nexport type StateEvents = {\r\n  [EVENT_STATE_CHANGED]: State\r\n}\r\n\r\n","import {BattleshipAI} from './BattleshipAI'\r\nimport {IStrategy} from './type/IStrategy'\r\nimport {State} from './type/State'\r\nimport {RandomStrategy} from './strategy/RandomStrategy'\r\nimport {ShipOrientationStrategy} from './strategy/ShipOrientationStrategy'\r\nimport {SinkStrategy} from './strategy/SinkStrategy'\r\nimport {EventEmitter} from '@atari-monk/event-emitter'\r\nimport {EVENT_STATE_CHANGED, StateEvents} from '../events/events'\r\n\r\nexport class StateMachine {\r\n  private state: State\r\n  private randomStrategy: IStrategy\r\n  private shipOrientationStrategy: IStrategy\r\n  private sinkStrategy: IStrategy\r\n  private eventEmitter: EventEmitter<StateEvents>\r\n\r\n  constructor(ai: BattleshipAI, eventEmitter: EventEmitter<StateEvents>) {\r\n    this.state = State.Idle\r\n    this.randomStrategy = new RandomStrategy(ai)\r\n    this.shipOrientationStrategy = new ShipOrientationStrategy(ai)\r\n    this.sinkStrategy = new SinkStrategy(ai)\r\n    this.eventEmitter = eventEmitter\r\n  }\r\n\r\n  public setState(state: State): void {\r\n    if (this.state !== state) this.eventEmitter.emit(EVENT_STATE_CHANGED, state)\r\n    this.state = state\r\n  }\r\n\r\n  public getStrategy(): IStrategy {\r\n    switch (this.state) {\r\n      case State.ShipOrientation:\r\n        return this.shipOrientationStrategy\r\n      case State.Sink:\r\n        return this.sinkStrategy\r\n      case State.Random:\r\n      default:\r\n        return this.randomStrategy\r\n    }\r\n  }\r\n\r\n  public transition(ai: BattleshipAI): void {\r\n    if (ai.isShipToSink()) {\r\n      this.setState(State.Sink)\r\n    } else if (ai.isShipHit()) {\r\n      this.setState(State.ShipOrientation)\r\n    } else {\r\n      this.setState(State.Random)\r\n    }\r\n  }\r\n}\r\n","import {BattleshipGrid} from '../grid/BattleshipGrid'\r\nimport {Range} from '../grid/type/Range'\r\nimport {ShipTarget} from './type/ShipTarget'\r\nimport {ShipTracker} from './ShipTracker'\r\nimport {StateMachine} from './StateMachine'\r\nimport {EventEmitter} from '@atari-monk/event-emitter'\r\nimport {StateEvents} from '../events/events'\r\n\r\nexport class BattleshipAI {\r\n  public enemyGrid: BattleshipGrid\r\n  public shotsTaken: Set<string>\r\n  private stateMachine: StateMachine\r\n  private shipTracker: ShipTracker\r\n\r\n  constructor(\r\n    enemyGrid: BattleshipGrid,\r\n    eventEmitter: EventEmitter<StateEvents>\r\n  ) {\r\n    this.enemyGrid = enemyGrid\r\n    this.shipTracker = new ShipTracker()\r\n    this.shotsTaken = new Set()\r\n    this.stateMachine = new StateMachine(this, eventEmitter)\r\n  }\r\n\r\n  public aiMove(\r\n    range: Range = {\r\n      minLetter: 'A',\r\n      maxLetter: 'J',\r\n      minNumber: 1,\r\n      maxNumber: 10,\r\n    }\r\n  ) {\r\n    this.stateMachine.transition(this)\r\n    const strategy = this.stateMachine.getStrategy()\r\n    const {shot, log} = strategy.attack(range)\r\n    const result = this.enemyGrid.hitCell(shot)\r\n    if (result.shipHit) this.shipTracker.handleShot(shot)\r\n    strategy.updateState()\r\n    result.log = log\r\n    return result\r\n  }\r\n\r\n  public isShipHit(): boolean {\r\n    return this.shipTracker.getFirstActiveHit() !== undefined\r\n  }\r\n\r\n  public getHitShip(): ShipTarget | undefined {\r\n    return this.shipTracker.getFirstActiveHit()\r\n  }\r\n\r\n  public isShipToSink() {\r\n    return this.shipTracker.getShipToSink() !== undefined\r\n  }\r\n\r\n  public getShipToSink(): ShipTarget | undefined {\r\n    return this.shipTracker.getShipToSink()\r\n  }\r\n}\r\n","export enum FLEET_TYPE {\r\n  STATIC,\r\n  RANDOM,\r\n}\r\n","export enum GAME_MODE {\r\n  TWO_PLAYER,\r\n  PLAYER_VS_AI,\r\n  AI_TEST,\r\n}\r\n","export enum PLAYER_TYPE {\r\n  HUMAN,\r\n  AI,\r\n}\r\n","export const tests = {\r\n  test1: {\r\n    grid: [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ],\r\n    range: {\r\n      minLetter: 'C',\r\n      maxLetter: 'H',\r\n      minNumber: 5,\r\n      maxNumber: 5,\r\n    },\r\n  },\r\n  test2: {\r\n    grid: [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ],\r\n    range: {\r\n      minLetter: 'F',\r\n      maxLetter: 'F',\r\n      minNumber: 3,\r\n      maxNumber: 8,\r\n    },\r\n  },\r\n  test3: {\r\n    grid: [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 1, 1, 1, 0, 1, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ],\r\n    range: {\r\n      minLetter: 'C',\r\n      maxLetter: 'H',\r\n      minNumber: 4,\r\n      maxNumber: 7,\r\n    },\r\n  },\r\n  test4: {\r\n    grid: [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 1, 0, 0, 0, 0, 1, 1, 1, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 1, 0, 0, 1, 1, 1, 1, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ],\r\n    range: {\r\n      minLetter: 'A',\r\n      maxLetter: 'J',\r\n      minNumber: 1,\r\n      maxNumber: 10,\r\n    },\r\n  },\r\n}\r\n","export class EventEmitter {\n    listeners = new Map();\n    on(event, listener) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        this.listeners.get(event).add(listener);\n    }\n    off(event, listener) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.delete(listener);\n            if (eventListeners.size === 0) {\n                this.listeners.delete(event);\n            }\n        }\n    }\n    emit(event, payload) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.forEach(listener => listener(payload));\n        }\n    }\n    clear(event) {\n        if (event) {\n            this.listeners.delete(event);\n        }\n        else {\n            this.listeners.clear();\n        }\n    }\n    once(event, listener) {\n        const onceListener = payload => {\n            listener(payload);\n            this.off(event, onceListener);\n        };\n        this.on(event, onceListener);\n    }\n}\n","import {\r\n  BattleshipGrid,\r\n  BattleshipAI,\r\n  ShipPlacer,\r\n  FleetPlacer,\r\n} from '../../libs/battleship'\r\nimport {FLEET_TYPE} from './type/FLEET_TYPE'\r\nimport {GAME_MODE} from './type/GAME_MODE'\r\nimport {PLAYER} from './type/PLAYER'\r\nimport {PLAYER_TYPE} from './type/PLAYER_TYPE'\r\nimport {bigStyle} from './render'\r\nimport {GameConfig} from './type/GameConfig'\r\nimport {PlayerConfig} from './type/PlayerConfig'\r\nimport {tests} from './tests'\r\nimport {EventEmitter} from '@atari-monk/event-emitter'\r\nimport {\r\n  EVENT_STATE_CHANGED,\r\n  StateEvents,\r\n} from '../../libs/battleship/events/events'\r\nimport {State} from '../../libs/battleship/ai/type/State'\r\nimport {IFleetPlacer} from '../../libs/battleship/grid/type/IFleetPlacer'\r\nimport {Display, toggleDisplay} from './dom_utils'\r\n\r\nexport function generateGrid(fleetType: FLEET_TYPE) {\r\n  const grid = new BattleshipGrid()\r\n  const fleetPlacer: IFleetPlacer = new FleetPlacer()\r\n  switch (fleetType) {\r\n    case FLEET_TYPE.RANDOM:\r\n      fleetPlacer.placeFleet(grid.ships, grid.grid, grid.rows, grid.cols, true)\r\n      break\r\n    case FLEET_TYPE.STATIC:\r\n      ShipPlacer.placeShipsFromArray(\r\n        tests.test4.grid,\r\n        grid.grid,\r\n        grid.rows,\r\n        grid.cols\r\n      )\r\n      break\r\n    default:\r\n      fleetPlacer.placeFleet(grid.ships, grid.grid, grid.rows, grid.cols, true)\r\n      break\r\n  }\r\n  return grid\r\n}\r\n\r\nexport const player1Grid = generateGrid(FLEET_TYPE.RANDOM)\r\nexport const player2Grid = generateGrid(FLEET_TYPE.RANDOM)\r\n\r\nexport const config: GameConfig = {\r\n  clearConsole: false,\r\n  mode: GAME_MODE.PLAYER_VS_AI,\r\n  gridId: 'grid',\r\n  players: new Map<PLAYER, PlayerConfig>([\r\n    [\r\n      PLAYER.PLAYER2,\r\n      {\r\n        role: PLAYER.PLAYER2,\r\n        type: PLAYER_TYPE.AI,\r\n        name: 'Player 2',\r\n        style: bigStyle('red'),\r\n        grid: player2Grid,\r\n        hideShips: true,\r\n      },\r\n    ],\r\n    [\r\n      PLAYER.PLAYER1,\r\n      {\r\n        role: PLAYER.PLAYER1,\r\n        type: PLAYER_TYPE.HUMAN,\r\n        name: 'Player 1',\r\n        style: bigStyle('lightblue'),\r\n        grid: player1Grid,\r\n        hideShips: false,\r\n      },\r\n    ],\r\n  ]),\r\n}\r\n\r\nconst eventEmitter = new EventEmitter<StateEvents>()\r\neventEmitter.on(EVENT_STATE_CHANGED, newState => {\r\n  console.log('State changed to', State[newState])\r\n})\r\nexport const ai = new BattleshipAI(player1Grid, eventEmitter)\r\n\r\n/*\r\nconst ids = ['playerInput', 'submitInput', 'inputResult', 'continueButton']\r\n\r\nfunction toogleInputDisplay(ids: string[], displayValue = Display.BLOCK) {\r\n  ids.forEach(id => toggleDisplay(id, displayValue))\r\n}\r\n\r\nfunction toogleUIOnGameMode(ids: string[], gameMode: GAME_MODE) {\r\n  switch (gameMode) {\r\n    case GAME_MODE.TWO_PLAYER:\r\n      toogleInputDisplay(ids)\r\n      break\r\n    case GAME_MODE.PLAYER_VS_AI:\r\n      toogleInputDisplay(ids)\r\n      break\r\n    case GAME_MODE.AI_TEST:\r\n      toogleInputDisplay(ids, Display.NONE)\r\n      break\r\n    default:\r\n      toogleInputDisplay(ids)\r\n      break\r\n  }\r\n}\r\n\r\ntoogleUIOnGameMode(ids, config.mode)\r\n*/\r\n","import {config} from './config'\r\nimport {GameConfig} from './type/GameConfig'\r\nimport {PLAYER} from './type/PLAYER'\r\nimport {PlayerConfig} from './type/PlayerConfig'\r\nimport {BattleshipGridRenderer} from './../../libs/battleship'\r\n\r\nexport function renderGrid(\r\n  gridId: string,\r\n  playerConfig: PlayerConfig,\r\n  renderer: BattleshipGridRenderer\r\n) {\r\n  const element = document.getElementById(gridId)!\r\n  element.textContent = ''\r\n  element.textContent = renderer.render(playerConfig.hideShips)\r\n}\r\n\r\nexport function printPlayer(\r\n  player: PLAYER,\r\n  gameConfig: GameConfig,\r\n  renderer: BattleshipGridRenderer,\r\n  inConsole = true\r\n) {\r\n  const {gridId} = gameConfig\r\n  const playerConfig = gameConfig.players.get(player)!\r\n  renderGrid(gridId, playerConfig, renderer)\r\n\r\n  if (!inConsole) return\r\n\r\n  const {name, style, grid, hideShips} = playerConfig\r\n  console.log(`%c${name}`, style)\r\n  console.log(`%c${renderer.render(hideShips)}\\n`, style)\r\n}\r\n\r\nexport function printGameState(\r\n  player: PLAYER,\r\n  gameConfig: GameConfig,\r\n  renderer: BattleshipGridRenderer\r\n) {\r\n  if (config.clearConsole) console.clear()\r\n  printPlayer(player, gameConfig, renderer)\r\n}\r\n\r\nexport function bigStyle(color: string) {\r\n  return `color: ${color}; background-color: black; font-size: 20px; font-weight: bold;`\r\n}\r\n\r\nexport function colorStyle(color: string) {\r\n  return `color: ${color};`\r\n}\r\n","export async function getInputFromPage(playerName: string): Promise<string> {\r\n  return new Promise((resolve) => {\r\n    const inputField = document.getElementById(\r\n      'playerInput'\r\n    ) as HTMLInputElement\r\n    const submitButton = document.getElementById(\r\n      'submitInput'\r\n    ) as HTMLButtonElement\r\n    const resultDisplay = document.getElementById(\r\n      'inputResult'\r\n    ) as HTMLParagraphElement\r\n\r\n    inputField.style.display = 'block'\r\n    submitButton.style.display = 'block'\r\n    resultDisplay.style.display = 'none'\r\n    inputField.focus()\r\n\r\n    const submitInput = () => {\r\n      const input = inputField.value.trim()\r\n      if (input !== '') {\r\n        resultDisplay.textContent = `${playerName}: ${input}`\r\n        resultDisplay.style.display = 'block'\r\n        inputField.style.display = 'none'\r\n        submitButton.style.display = 'none'\r\n        resolve(input)\r\n        inputField.value = ''\r\n        inputField.removeEventListener('keydown', enterHandler)\r\n      }\r\n    }\r\n\r\n    const enterHandler = (event: KeyboardEvent) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault()\r\n        submitInput()\r\n      }\r\n    }\r\n\r\n    submitButton.onclick = submitInput\r\n    inputField.addEventListener('keydown', enterHandler)\r\n  })\r\n}\r\n\r\nexport async function setInputResult(\r\n  playerName: string,\r\n  shot: string,\r\n  result: boolean\r\n): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    const resultDisplay = document.getElementById(\r\n      'inputResult'\r\n    ) as HTMLParagraphElement\r\n\r\n    resultDisplay.textContent = `${playerName}: ${shot} ${\r\n      result ? 'hit' : 'miss'\r\n    }`\r\n    resultDisplay.style.display = 'block'\r\n\r\n    resolve()\r\n  })\r\n}\r\n\r\nexport function getInputFromConsole(playerName: string): Promise<string> {\r\n  return new Promise((resolve) => {\r\n    const input = prompt(playerName)\r\n    if (input !== null && input.trim() !== '') {\r\n      resolve(input)\r\n    }\r\n  })\r\n}\r\n\r\nexport function waitForButtonClick(buttonId: string): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    const button = document.getElementById(buttonId) as HTMLButtonElement\r\n    if (!button) throw new Error(`Button with ID \"${buttonId}\" not found`)\r\n\r\n    button.style.display = 'block'\r\n\r\n    const triggerClick = () => {\r\n      button.style.display = 'none'\r\n      button.removeEventListener('click', clickHandler)\r\n      document.removeEventListener('keydown', enterHandler)\r\n      resolve()\r\n    }\r\n\r\n    const clickHandler = () => triggerClick()\r\n\r\n    const enterHandler = (event: KeyboardEvent) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault()\r\n        setTimeout(triggerClick, 100)\r\n      }\r\n    }\r\n\r\n    button.addEventListener('click', clickHandler)\r\n    setTimeout(() => document.addEventListener('keydown', enterHandler), 200)\r\n  })\r\n}\r\n","import {getInputFromPage, setInputResult} from './input'\r\nimport {PLAYER_TYPE} from './type/PLAYER_TYPE'\r\nimport {colorStyle} from './render'\r\nimport {ai, config} from './config'\r\nimport {PlayerConfig} from './type/PlayerConfig'\r\nimport {HitResult} from '../../libs/battleship/grid/type/HitResult'\r\nimport {tests} from './tests'\r\nimport {GAME_MODE} from './type/GAME_MODE'\r\n\r\nexport function tooglePlayers(attacker: PlayerConfig, defender: PlayerConfig) {\r\n  return [defender, attacker]\r\n}\r\n\r\nexport async function attack(attacker: PlayerConfig, defender: PlayerConfig) {\r\n  const {name: attackerName} = attacker\r\n  const {grid} = defender\r\n\r\n  let validMove = false\r\n  let hitResult: HitResult = {\r\n    label: '',\r\n    alreadyHit: false,\r\n    shipHit: false,\r\n    log: isShipHit => '',\r\n  }\r\n\r\n  while (!validMove) {\r\n    let shot: string = ''\r\n\r\n    if (\r\n      config.mode === GAME_MODE.PLAYER_VS_AI &&\r\n      attacker.type === PLAYER_TYPE.HUMAN\r\n    ) {\r\n      shot = await getInputFromPage(attackerName)\r\n      hitResult = grid.hitCell(shot)\r\n      console.log(`${attackerName}:`, shot, hitResult.shipHit ? 'hit' : 'miss')\r\n    } else if (attacker.type === PLAYER_TYPE.AI) {\r\n      hitResult = ai.aiMove(tests.test4.range)\r\n      console.log(hitResult.log!(hitResult.shipHit))\r\n    }\r\n\r\n    const {alreadyHit} = hitResult\r\n    if (alreadyHit) {\r\n      console.log(\r\n        `%cThis cell was already hit. Try again.`,\r\n        colorStyle('yellow')\r\n      )\r\n    } else {\r\n      validMove = true\r\n      await setInputResult(attacker.name, hitResult.label, hitResult.shipHit)\r\n    }\r\n  }\r\n}\r\n","import {PLAYER} from './type/PLAYER'\r\nimport {printGameState} from './render'\r\nimport {config} from './config'\r\nimport {attack, tooglePlayers} from './logic'\r\nimport {waitForButtonClick} from './input'\r\nimport {BattleshipGridRenderer} from './libs/../../../libs/battleship'\r\nimport {GAME_MODE} from './type/GAME_MODE'\r\n\r\nexport async function startGame() {\r\n  let isGameOver = false\r\n  let defender = config.players.get(PLAYER.PLAYER1)!\r\n  let attacker = config.players.get(PLAYER.PLAYER2)!\r\n  const renderer1 = new BattleshipGridRenderer(defender.grid)\r\n  const renderer2 = new BattleshipGridRenderer(attacker.grid)\r\n\r\n  while (!isGameOver) {\r\n    const renderer = defender.role === PLAYER.PLAYER1 ? renderer1 : renderer2\r\n    printGameState(defender.role, config, renderer)\r\n\r\n    await attack(attacker, defender)\r\n\r\n    isGameOver = defender.grid.isGameOver()\r\n\r\n    printGameState(defender.role, config, renderer)\r\n\r\n    if (isGameOver) {\r\n      console.log('Game over! All ships have been sunk.')\r\n      break\r\n    }\r\n\r\n    await waitForButtonClick('continueButton')\r\n    if (config.mode === GAME_MODE.PLAYER_VS_AI) {\r\n      ;[attacker, defender] = tooglePlayers(attacker, defender)\r\n    }\r\n  }\r\n}\r\n","import {startGame} from './game/loop'\r\n\r\nawait startGame()\r\n"],"names":["PLAYER","PLAYER3","DIRECTION","DIRECTION2","Orientation","Orientation2","getRandomOrientation","orientations","ShipOrientation","ShipOrientation2","getRandomCell","range","letters","minLetterIndex","maxLetterIndex","letter","number","labelToIndex","label","rows","cols","match","col","row","indexToLabel","sortLabels","labels","orientation","labelArray","a","b","rowA","colA","rowB","colB","BattleshipGrid","initialGrid","ships","grid","i","j","shipId","ship","s","cell","position","direction","BattleshipGridRenderer","hideShips","columnLabels","_","gridRows","rowIndex","rowLabel","cells","ShipPlacer","shipGrid","FleetPlacer","enforceSpacing","placed","attempts","maxRow","maxCol","size","coords","ShipTracker","shot","existingShip","existingHit","existingX","existingY","shotX","shotY","State","State2","RandomStrategy","ai","isShipHit","coinToss","ShipOrientationStrategy","target","hit","next","firstHit","secondHit","hitPos1","hitPos2","SinkStrategy","cellIndex","shotIndex","sortedLabels","sortedHits","leftCell","rightCell","leftMiss","rightMiss","topCell","bottomCell","topMiss","bottomMiss","EVENT_STATE_CHANGED","StateMachine","eventEmitter","state","BattleshipAI","enemyGrid","strategy","log","result","FLEET_TYPE","FLEET_TYPE2","GAME_MODE","GAME_MODE2","PLAYER_TYPE","PLAYER_TYPE2","tests","EventEmitter","event","listener","eventListeners","payload","onceListener","generateGrid","fleetType","fleetPlacer","player1Grid","player2Grid","config","bigStyle","newState","renderGrid","gridId","playerConfig","renderer","element","printPlayer","player","gameConfig","inConsole","name","style","printGameState","color","colorStyle","getInputFromPage","playerName","resolve","inputField","submitButton","resultDisplay","submitInput","input","enterHandler","setInputResult","waitForButtonClick","buttonId","button","triggerClick","clickHandler","tooglePlayers","attacker","defender","attack","attackerName","validMove","hitResult","alreadyHit","startGame","isGameOver","renderer1","renderer2"],"mappings":"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","x_google_ignoreList":[21]}